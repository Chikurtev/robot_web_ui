<launch>
    <!-- Start ROS communication between the robot's computer and Linorobot base -->
    <node pkg="rosserial_python" name="rosserial_lino" type="serial_node.py" output="screen">
        <param name="port" value="/dev/linobase" />
        <param name="baud" value="57600" />
    </node>

    <!-- IMU Relay and Filter -->
    <include file="$(find linorobot)/launch/include/imu/imu.launch" />

    <!-- Publish Linorobot odometry -->
    <node pkg="linorobot" name="lino_base_node" type="lino_base_node"></node>

    <!-- Publish static transform from base_footprint to base_link -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="base_footprint_to_base_link" args="0 0 0.098 0 0 0  /base_footprint /base_link"/>

    <!-- Odom-IMU Extended Kalman Filter-->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization"> 
        <remap from="odometry/filtered" to="odom" />
        <rosparam command="load" file="$(find linorobot)/param/ekf/robot_localization.yaml" />
    </node>

    <!-- Run Linorobot compatible laser drivers -->
    <include file="$(find linorobot)/launch/include/laser.launch" />
    
    <!--Robco19: Start the filtering of the standofs from the laser scan. Filter publishes to /scan_filtered topic-->
    <include file="$(find robco_laser_filters)/launch/robco_laser_filter.launch" />

  
  <node name="rosbridge_websocket" pkg="rosbridge_server" respawn="true" type="rosbridge_websocket">
    <param name="authenticate" value="false" />
    <param name="port" value="9090" />
    <param name="address" value="" />
  </node>

  <node name="web_video_server" pkg="web_video_server" type="web_video_server">
    <param name="port" value="8080" />
  </node>


</launch>
